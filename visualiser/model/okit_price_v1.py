import json
import requests
from model import shapes
from model import calculator
from model import streaming
import sys
import datetime
import os


# import cx_Oracle

oci_url = "https://itra.oraclecloud.com/itas/.anon/myservices/api/v1/products"
# ociprice_url = "https://guk9elytviiyjhz-devadw.adb.uk-london-1.oraclecloudapps.com/ords/ociprice/okit/ociprice/"
# aws_url = "https://pricing.us-east-1.amazonaws.com/offers/v1.0/aws/"

# all resources form OKIT
all_resources = []


# get all OCI prices
def get_oci_price_list(cloud, url):
    # headers = {'Content-type': 'application/json'}
    if cloud == 'oci':
        PARAMS = {'offset': "0", 'limit': "500"}
        res = requests.get(url, PARAMS)
        # print("status code: {}".format(res.status_code))
    elif cloud == 'aws':
        res = requests.get(url)
        # print("status code: {}".format(res.status_code))
    return res.json()


# read json generated by user
def load_json(filename):
    # print(filename)
    # print(type(filename))
    # OCI_resources
    resources = []
    # data = filename
    # for item in data:

    # Get all resource names
    for item in filename:
        resources.append(item)
    # remove non-OCI resources
    del resources[0:3]
    all_resources = resources[:-1]

    # Call pricing calculator
    OKIT_RESULTS = price_calculator(filename, all_resources)

    return OKIT_RESULTS

# price calculation in saved json


def price_calculator(okitjson, all_resources):
    results = {}
    for oci_resource in all_resources:
        results.update({oci_resource: (0, 0)})

    print("==============================")
    print(" PAYG   Monthly_Flex ")

    #############################################
    # ADB price calculator
    #############################################
    if okitjson['autonomous_databases']:
        adb_storage = 0
        adb_ocpu = 0
        for adb in okitjson['autonomous_databases']:
            adb_storage += float(adb['data_storage_size_in_tbs'])
            adb_ocpu += float(adb['cpu_core_count'])
        # get ADB storage per month
        adb_storage_price = calculator.get_oci_price_ords('B89041')
        PAYG_ADB_Storage, Monthly_Flex_ADB_Storage = calculator.TB_per_month(
            adb_storage_price, adb_storage)

        # get ocpu per hour
        adb_ocpu_price = calculator.get_oci_price_ords('B89040')
        PAYG_ADB_OCPU, Monthly_Flex_ADB_OCPU = calculator.OCPU_per_hr(
            adb_ocpu_price, adb_ocpu)

        PAYG_ADB_price = round(PAYG_ADB_Storage + PAYG_ADB_OCPU, 2)
        Monthly_Flex_ADB_price = round(
            Monthly_Flex_ADB_Storage + Monthly_Flex_ADB_OCPU, 2)
        print(PAYG_ADB_price, Monthly_Flex_ADB_price)
        results.update({'autonomous_databases': (
            PAYG_ADB_price, Monthly_Flex_ADB_price)})
    else:
        results.update({'autonomous_databases': (0, 0)})

    #############################################
    # DBaaS price calculator
    #############################################
    if okitjson['database_systems']:
        dbaas_storage = 0
        dbaas_ocpu = 0
        PAYG_DBaaS_OCPU = 0
        Monthly_Flex_DBaaS_OCPU = 0

        for dbaas in okitjson['database_systems']:
            node_count = dbaas['node_count']
            # print(node_count)
            shape = dbaas['shape']
            license_model = dbaas['license_model']
            OCPU, MEM, SSD, DBaaS_SKU = shapes.ComputeShape(shape)
            database_edition = dbaas['database_edition']
            dbaas_shape = str(shape[0:2]).lower()
            if dbaas_shape == "ex":
                dbaas_license_price = calculator.get_oci_price_ords(DBaaS_SKU)
                # print(dbaas_license_price)
            else:
                dbaas_license_price = calculator.get_dbaas_license_price(
                    license_model, database_edition, dbaas_shape)
                # print(dbaas_license_price)

            if node_count == 1:
                if dbaas_shape == "vm":
                    # Add up DB license per ocpu
                    PAYG, Monthly_Flex = calculator.OCPU_per_hr(
                        dbaas_license_price, OCPU)
                    # Non-RAC VM - 456GB storage will be added
                    dbaas_storage += dbaas['data_storage_size_in_gb'] + 456
                elif (dbaas_shape == "bm" or dbaas_shape == "ex"):
                    PAYG, Monthly_Flex = calculator.BM_Exa_OCPU_per_hr(license_model, database_edition,
                                                                       dbaas_license_price, dbaas_shape,
                                                                       int(dbaas['cpu_core_count']))
                # Add up DB license per ocpu
                PAYG_DBaaS_OCPU += PAYG
                Monthly_Flex_DBaaS_OCPU += Monthly_Flex
            else:
                # node count = 2
                # Add up DB license per ocpu
                PAYG, Monthly_Flex = calculator.OCPU_per_hr(
                    dbaas_license_price, OCPU)
                PAYG_DBaaS_OCPU += PAYG * 2
                Monthly_Flex_DBaaS_OCPU += Monthly_Flex * 2
                if dbaas_shape == "vm":
                    # RAC VM - DB license cose will be double/ 656GB storage will be added
                    dbaas_storage = dbaas['data_storage_size_in_gb'] + 656

        # DBaaS block storage price
        block_storage_price = calculator.get_oci_price_ords('B91961')
        # DBaaS vpus price
        vpus_ocpu_price = calculator.get_oci_price_ords('B91962')
        PAYG_DBaaS_volume_price, Monthly_Flex_DBaaS_volume_price = calculator.Block_volume_GB_per_month(
            block_storage_price, dbaas_storage, vpus_ocpu_price, 20)

        PAYG_DBaaS_price = round(PAYG_DBaaS_OCPU + PAYG_DBaaS_volume_price, 2)
        Monthly_Flex_DBaaS_price = round(
            Monthly_Flex_DBaaS_OCPU + Monthly_Flex_DBaaS_volume_price, 2)

        print(PAYG_DBaaS_price, Monthly_Flex_DBaaS_price)
        results.update({'database_systems': (
            PAYG_DBaaS_price, Monthly_Flex_DBaaS_price)})

    #############################################
    # Block Volume price calculator
    #############################################
    if okitjson['block_storage_volumes']:
        block_gb = 0
        vpus_per_gb = 0
        PAYG_Block_Volume_price = 0
        Monthly_Flex_Block_Volume_price = 0
        # get block volume price
        block_storage_price = calculator.get_oci_price_ords('B91961')
        # get vpus price
        vpus_ocpu_price = calculator.get_oci_price_ords('B91962')
        for block in okitjson['block_storage_volumes']:
            block_gb = float(block['size_in_gbs'])
            vpus_per_gb = float(block['vpus_per_gb'])
            PAYG, Monthly_Flex = calculator.Block_volume_GB_per_month(
                block_storage_price, block_gb, vpus_ocpu_price, vpus_per_gb)
            PAYG_Block_Volume_price += PAYG
            Monthly_Flex_Block_Volume_price += Monthly_Flex

        print(PAYG_Block_Volume_price, Monthly_Flex_Block_Volume_price)
        results.update({'block_storage_volumes': (
            PAYG_Block_Volume_price, Monthly_Flex_Block_Volume_price)})
    else:
        results.update({'block_storage_volumes': (0, 0)})
    #############################################
    # Instance price calculator
    #############################################
    if okitjson['instances']:
        PAYG_Compute_OCPU = 0
        Monthly_Flex_Compute_OCPU = 0
        boot_volume_gb = 0
        for instance in okitjson['instances']:
            shape = instance['shape']
            OCPU, MEM, SSD, Compute_SKU = shapes.ComputeShape(shape)
            ocpu_price = calculator.get_oci_price_ords(Compute_SKU)
            PAYG, Monthly_Flex = calculator.OCPU_per_hr(ocpu_price, OCPU)
            PAYG_Compute_OCPU += PAYG
            Monthly_Flex_Compute_OCPU += Monthly_Flex
            # block storage price
            block_storage_price = calculator.get_oci_price_ords('B91961')
            # get vpus price
            vpus_ocpu_price = calculator.get_oci_price_ords('B91962')
            # Accumulate the size of boot volumes, this will be all balanced performence
            boot_volume_gb += float(instance['source_details']
                                    ['boot_volume_size_in_gbs'])

        # Block volume price for PAYG and Monthly Flex are same vpus_per_gb for boot volume is 10 be default
        boot_volume_vpus_per_gb = 10
        PAYG_Boot_volume_price, Monthly_Flex_Boot_volume_price = calculator.Block_volume_GB_per_month(
            block_storage_price, boot_volume_gb, vpus_ocpu_price, boot_volume_vpus_per_gb)

        PAYG_Compute_price = round(
            PAYG_Compute_OCPU + PAYG_Boot_volume_price, 2)
        Monthly_Flex_Compute_price = round(
            Monthly_Flex_Compute_OCPU + Monthly_Flex_Boot_volume_price, 2)
        print(PAYG_Compute_price, Monthly_Flex_Compute_price)
        results.update(
            {'instances': (PAYG_Compute_price, Monthly_Flex_Compute_price)})
    else:
        results.update({'instances': (0, 0)})
    #############################################
    # FastConnect price calculator
    #############################################
    if okitjson['fast_connects']:
        # Currentl OKIT does not have an option to select provisioned FC bandwidth
        bandwidth = "1Gbps"
        PAYG_FC_price = 0
        Monthly_Flex_FC_price = 0
        for fc in okitjson['fast_connects']:
            # bandwidth = fc['bandwidth']
            fc_SKU = shapes.FastConnect(bandwidth)
            # get fastconnect price
            fc_price = calculator.get_oci_price_ords(fc_SKU)
            PAYG, Monthly_Flex = calculator.OCPU_per_hr(fc_price, 1)
            PAYG_FC_price += PAYG
            Monthly_Flex_FC_price += Monthly_Flex
        print(PAYG_FC_price, Monthly_Flex_FC_price)
        results.update(
            {'fast_connects': (PAYG_FC_price, Monthly_Flex_FC_price)})
    else:
        results.update({'fast_connects': (0, 0)})
    #############################################
    # Load Balancer price calculator
    #############################################
    if okitjson['load_balancers']:
        PAYG_LB_price = 0
        Monthly_Flex_LB_price = 0
        for lb in okitjson['load_balancers']:
            shape_name = lb['shape']
            lb_SKU = shapes.LoadBalancer(shape_name)
            # get LB price
            lb_price = calculator.get_oci_price_ords(lb_SKU)
            PAYG, Monthly_Flex = calculator.OCPU_per_hr(lb_price, 1)
            PAYG_LB_price += PAYG
            Monthly_Flex_LB_price += Monthly_Flex
        print(PAYG_LB_price, Monthly_Flex_LB_price)
        results.update(
            {'load_balancers': (PAYG_LB_price, Monthly_Flex_LB_price)})
    else:
        results.update({'load_balancers': (0, 0)})
    #############################################
    # File Storage Service price calculator
    #############################################
    if okitjson['file_storage_systems']:
        # default 1TB
        fss_gb = 1000
        # get file storage service price
        fss_storage_price = calculator.get_oci_price_ords('B89057')
        PAYG_FSS_Storage_price, Monthly_Flex_FSS_Storage_price = calculator.Storage_GB_per_month(fss_storage_price,
                                                                                                 fss_gb)
        print(PAYG_FSS_Storage_price, Monthly_Flex_FSS_Storage_price)
        results.update({'file_storage_systems': (
            PAYG_FSS_Storage_price, Monthly_Flex_FSS_Storage_price)})
    else:
        results.update({'file_storage_systems': (0, 0)})
    #############################################
    # Object Storage Service price calculator
    #############################################
    if okitjson['object_storage_buckets']:
        # default 1TB, 100K request,  fist 50K resuests will be free
        object_storage_gb = 1000
        requests = 100000
        # get requests of object storage
        object_request_price = calculator.get_oci_price_ords('B91627')
        # fist 50K resuests will be free
        requests -= 50000
        PAYG_Request, Monthly_Flex_Request = calculator.Request_per_month(
            object_request_price, requests)

        # get object storage price
        object_storage_price = calculator.get_oci_price_ords('B91628')

        # first 10GB will be free
        object_storage_gb -= 10
        PAYG_Storage, Monthly_Flex_Storage = calculator.Storage_GB_per_month(
            object_storage_price, object_storage_gb)
        # PAYG
        PAYG_Object_Storage_price = round(PAYG_Storage + PAYG_Request, 2)
        # Monthly Flex
        Monthly_Flex_Object_Storage_price = round(
            Monthly_Flex_Storage + Monthly_Flex_Request, 2)
        print(PAYG_Object_Storage_price, Monthly_Flex_Object_Storage_price)
        results.update({'object_storage_buckets': (
            PAYG_Object_Storage_price, Monthly_Flex_Object_Storage_price)})
    else:
        results.update({'object_storage_buckets': (0, 0)})

    # call result app
    OKIT_RESULTS = parse_results_app(results)

    return OKIT_RESULTS

# update RESULTS, ARR table in OCIPRICE DB


def parse_results_app(results):
    RESULTS = []
    PAYG_Monthly = 0.0
    Monthly_Flex_Monthly = 0.0
    #filename = filename[:-5]
    filename = "okit_cost"
    CREATED_AT = str(datetime.datetime.now().strftime("%d-%b-%y"))

    try:
        for resource, prices in results.items():
            row_data = {"FILENAME": filename, "RESOURCENAME": resource, "PAYG": prices[0], "MONTHLY_FLEX": prices[1],
                        "CREATED_AT": CREATED_AT}
            # row_data = (filename, resource, prices[0], prices[1])
            PAYG_Monthly += prices[0]
            Monthly_Flex_Monthly += prices[1]
            # Price per resource will be saved into RESULTS as PAYG and Monthly FLEX
            RESULTS.append(row_data)
        # print("Price per resource:{}".format(RESULTS))

        # Get total PAYG/Monthle FLEX per Monthly/ARR
        Total_PAYG_Monthly = round(PAYG_Monthly, 2)
        Total_Monthly_Flex_Monthly = round(Monthly_Flex_Monthly, 2)
        Total_PAYG_Yearly = round(Total_PAYG_Monthly * 12, 2)
        Total_Monthly_Flex_Yearly = round(Total_Monthly_Flex_Monthly * 12, 2)
        # print("RESULTS - " + str(len(RESULTS)) + " Rows Inserted")

        # monthly, yearly PAYG, Monthle Flex
        #
        ARR_Result = {"FILENAME": filename, "MONTHLY_PAYG": Total_PAYG_Monthly,
                      "MONTHLY_FLEX": Total_Monthly_Flex_Monthly, "YEARLY_PAYG": Total_PAYG_Yearly,
                      "YEARLY_FLEX": Total_Monthly_Flex_Yearly, "CREATED_AT": CREATED_AT}
        print("Total price per monthly/yearly:{}".format(ARR_Result))

        OKIT_RESULTS = RESULTS.copy()
        # append a dictionary to a list
        ARR_Result_copy = ARR_Result.copy()
        # this will be a consolidated results that contains service price and total price
        OKIT_RESULTS.append(ARR_Result_copy)
        # print(type(OKIT_RESULTS), OKIT_RESULTS)

        """
        # output of price_per_resource_per_month
        price_per_resource = os.getcwd() + "/results/" + filename + "_price_per_resource_per_month.json"
        #print(price_per_resource)

        with open(price_per_resource, 'w') as f:
            json.dump(RESULTS, f)
        # output of Monthly/Yearlyprice
        total_price = os.getcwd() + "/results/" + filename + "_total_price.json"
        #print(price_per_resource)
        with open(total_price, 'w') as f:
            json.dump(ARR_Result, f)
        f.close()
        """
        # updating DB can be done once json output is locally available
        # push to streaming to update DB for APEX
        #streaming.kafka_structure(RESULTS, "RESULTS")
        # push to streaming to update DB for APEX
        #streaming.kafka_structure(ARR_Result, "ARR")

    except Exception as e:
        print("\nError insering data into ARR - " + str(e) + "\n")
        raise SystemExit

    return OKIT_RESULTS


"""
# If file is retrieved from APEX DB....
def OutputTypeHandler(cursor, name, defaultType, size, precision, scale):
    if defaultType == cx_Oracle.CLOB:
        return cursor.var(cx_Oracle.LONG_STRING, arraysize=cursor.arraysize)
    if defaultType == cx_Oracle.BLOB:
        return cursor.var(cx_Oracle.LONG_BINARY, arraysize=cursor.arraysize)


if __name__ == "__main__":
    # load json from /okit/okitweb/static/okit/templates/reference_architecture
    filename = sys.argv[1]
    okitjson, all_resources = load_json(filename)
    # print(okitjson)
    # calcuate price based on okit.json
    results = price_calculator(okitjson, all_resources)
    # print(results)
    parse_results_app(results, filename)
    
"""
